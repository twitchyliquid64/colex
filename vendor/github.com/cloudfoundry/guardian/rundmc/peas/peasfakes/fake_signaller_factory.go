// Code generated by counterfeiter. DO NOT EDIT.
package peasfakes

import (
	"sync"

	"code.cloudfoundry.org/guardian/rundmc/peas"
	"code.cloudfoundry.org/guardian/rundmc/signals"
)

type FakeSignallerFactory struct {
	NewSignallerStub        func(pidfilePath string) signals.Signaller
	newSignallerMutex       sync.RWMutex
	newSignallerArgsForCall []struct {
		pidfilePath string
	}
	newSignallerReturns struct {
		result1 signals.Signaller
	}
	newSignallerReturnsOnCall map[int]struct {
		result1 signals.Signaller
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSignallerFactory) NewSignaller(pidfilePath string) signals.Signaller {
	fake.newSignallerMutex.Lock()
	ret, specificReturn := fake.newSignallerReturnsOnCall[len(fake.newSignallerArgsForCall)]
	fake.newSignallerArgsForCall = append(fake.newSignallerArgsForCall, struct {
		pidfilePath string
	}{pidfilePath})
	fake.recordInvocation("NewSignaller", []interface{}{pidfilePath})
	fake.newSignallerMutex.Unlock()
	if fake.NewSignallerStub != nil {
		return fake.NewSignallerStub(pidfilePath)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.newSignallerReturns.result1
}

func (fake *FakeSignallerFactory) NewSignallerCallCount() int {
	fake.newSignallerMutex.RLock()
	defer fake.newSignallerMutex.RUnlock()
	return len(fake.newSignallerArgsForCall)
}

func (fake *FakeSignallerFactory) NewSignallerArgsForCall(i int) string {
	fake.newSignallerMutex.RLock()
	defer fake.newSignallerMutex.RUnlock()
	return fake.newSignallerArgsForCall[i].pidfilePath
}

func (fake *FakeSignallerFactory) NewSignallerReturns(result1 signals.Signaller) {
	fake.NewSignallerStub = nil
	fake.newSignallerReturns = struct {
		result1 signals.Signaller
	}{result1}
}

func (fake *FakeSignallerFactory) NewSignallerReturnsOnCall(i int, result1 signals.Signaller) {
	fake.NewSignallerStub = nil
	if fake.newSignallerReturnsOnCall == nil {
		fake.newSignallerReturnsOnCall = make(map[int]struct {
			result1 signals.Signaller
		})
	}
	fake.newSignallerReturnsOnCall[i] = struct {
		result1 signals.Signaller
	}{result1}
}

func (fake *FakeSignallerFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newSignallerMutex.RLock()
	defer fake.newSignallerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSignallerFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ peas.SignallerFactory = new(FakeSignallerFactory)
